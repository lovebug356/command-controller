// Generated by CoffeeScript 1.4.0
var cc, should;

should = require('should');

cc = require('../');

describe('CommandController', function() {
  it('should find the first command that is ready', function(done) {
    var cco, d1, d2, d3;
    d1 = new cc.BaseCommand();
    d2 = new cc.BaseCommand();
    d3 = new cc.BaseCommand();
    cco = new cc.CommandController();
    cco.addCommand(d1);
    cco.addCommand(d2);
    cco.addCommand(d3);
    d1.isReady = function(done) {
      return done(false);
    };
    return cco.firstReady(function(first) {
      first.should.equal(d2);
      return done();
    });
  });
  it('should find the first command that is ready and skip done commands', function(done) {
    var cco, d1, d2;
    d1 = new cc.BaseCommand();
    d2 = new cc.BaseCommand();
    cco = new cc.CommandController();
    cco.addCommand(d1);
    cco.addCommand(d2);
    d1.done = true;
    return cco.firstReady(function(first) {
      first.should.equal(d2);
      return done();
    });
  });
  it('should run all commands', function(done) {
    var cco, d1, d2;
    d1 = new cc.BaseCommand();
    d2 = new cc.BaseCommand();
    cco = new cc.CommandController();
    cco.addCommand(d1);
    cco.addCommand(d2);
    return cco.run(function() {
      d1.done.should.be.ok;
      d2.done.should.be.ok;
      return done();
    });
  });
  it('should limit the amount of simultanious commands', function(done) {
    var cco, d1, d2;
    d1 = new cc.ShellCommand("ls");
    d2 = new cc.ShellCommand("ls -als");
    cco = new cc.CommandController(1);
    cco.addCommand(d1);
    cco.addCommand(d2);
    cco.running.oldPush = cco.running.push;
    cco.running.push = function(item) {
      this.length.should.not.be.above(1.);
      return this.oldPush(item);
    };
    return cco.run(function() {
      d1.done.should.be.ok;
      d2.done.should.be.ok;
      return done();
    });
  });
  it('should chain commands that are dependencies of each other', function(done) {
    var cco, d1, d2;
    d1 = new cc.ShellCommand("ls");
    d2 = new cc.ShellCommand("ls -als");
    cco = new cc.CommandController(2);
    d2.addDependency(d1);
    cco.addCommand(d1);
    cco.addCommand(d2);
    return cco.run(function() {
      d1.done.should.be.ok;
      d2.done.should.be.ok;
      return done();
    });
  });
  it('should skip a task when a dependency has an error', function(done) {
    var cco, d1, d2;
    d1 = new cc.ShellCommand("ls");
    d2 = new cc.ShellCommand("ls -als");
    cco = new cc.CommandController(2);
    d2.addDependency(d1);
    cco.addCommand(d1);
    cco.addCommand(d2);
    d1.done = true;
    d1.err = true;
    return cco.firstReady(function(first) {
      should.not.exist(first);
      return done();
    });
  });
  it('should be done, if there are no ready tasks anymore', function(done) {
    var cco, d1, d2;
    d1 = new cc.ShellCommand("ls");
    d2 = new cc.ShellCommand("ls -als");
    cco = new cc.CommandController(2);
    d2.addDependency(d1);
    cco.addCommand(d1);
    cco.addCommand(d2);
    d1.done = true;
    d1.err = true;
    return cco.run(function() {
      d1.done.should.be.ok;
      d2.done.should.be.not.ok;
      return done();
    });
  });
  it('should continue if preRun returns false', function(done) {
    var cco, d1, d2;
    d1 = new cc.ShellCommand("ls");
    d2 = new cc.ShellCommand("ls -als");
    cco = new cc.CommandController(2);
    d1.preRun = function(done) {
      d1.done = true;
      return done(false);
    };
    cco.addCommand(d1);
    cco.addCommand(d2);
    return cco.run(function() {
      d1.done.should.be.ok;
      d2.done.should.be.ok;
      return done();
    });
  });
  it('should not block dependencies when preRun returns false', function(done) {
    var cco, d1, d2;
    d1 = new cc.ShellCommand("ls");
    d2 = new cc.ShellCommand("ls -als");
    d2.addDependency(d1);
    cco = new cc.CommandController(2);
    d1.preRun = function(done) {
      d1.done = true;
      return done(false);
    };
    cco.addCommand(d1);
    cco.addCommand(d2);
    return cco.run(function() {
      d1.done.should.be.ok;
      d2.done.should.be.ok;
      return done();
    });
  });
  it('should support very large numbers of dependency tasks', function(done) {
    var cco, d1, d3;
    cco = new cc.CommandController(2);
    d1 = new cc.ShellCommand("ls");
    cco.addCommand(d1);
    d3 = new cc.ShellCommand("ls -als");
    cco.addCommand(d3);
    return cco.run(function() {
      d1.done.should.be.ok;
      d3.done.should.be.ok;
      return done();
    });
  });
  it('should find cmds which are the real targets (are no dependencies)', function(done) {
    var cco, d1, d2;
    cco = new cc.CommandController(2);
    d1 = cco.addCommand(new cc.ShellCommand("ls"));
    d2 = cco.addCommand(new cc.ShellCommand("ls -als"));
    d2.addDependency(d1);
    return cco.firstTarget(function(target) {
      console.log(target);
      target.should.eql(d2);
      return done();
    });
  });
  it('should find cmds which are marked as targets (target=True)', function(done) {
    var cco, d1, d2;
    cco = new cc.CommandController(2);
    d1 = cco.addCommand(new cc.ShellCommand("ls"));
    d2 = cco.addCommand(new cc.ShellCommand("ls -als"));
    d2.addDependency(d1);
    d1.target = true;
    return cco.firstTarget(function(target) {
      target.should.eql(d1);
      return done();
    });
  });
  it('should find first ready cmd', function(done) {
    var cco, d1, d2;
    cco = new cc.CommandController(2);
    d1 = cco.addCommand(new cc.ShellCommand("ls"));
    d2 = cco.addCommand(new cc.ShellCommand("ls -als"));
    d2.addDependency(d1);
    d1.target = true;
    return cco.firstTarget(function(target) {
      target.should.eql(d1);
      return done();
    });
  });
  it('should skip dependencies of already done tasks', function(done) {
    var cco, d1, d2;
    cco = new cc.CommandController(2);
    d1 = cco.addCommand(new cc.ShellCommand("ls"));
    d2 = cco.addCommand(new cc.ShellCommand("ls -als"));
    d2.addDependency(d1);
    d2.getDstFile = function() {
      return 'package.json';
    };
    return cco.checkPreRun(function() {
      d2.done.should.be.ok;
      d2.alreadyDone.should.be.ok;
      d1.done.should.be.ok;
      return done();
    });
  });
  return it('should not skip dependencies of already done tasks if marked as target', function(done) {
    var cco, d1, d2;
    cco = new cc.CommandController(2);
    d1 = cco.addCommand(new cc.ShellCommand("ls"));
    d2 = cco.addCommand(new cc.ShellCommand("ls -als"));
    d2.addDependency(d1);
    d2.getDstFile = function() {
      return 'package.json';
    };
    d1.target = true;
    return cco.checkPreRun(function() {
      d2.done.should.be.ok;
      d2.alreadyDone.should.be.ok;
      d1.done.should.be.not.ok;
      return done();
    });
  });
});

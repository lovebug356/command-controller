// Generated by CoffeeScript 1.4.0
var cc, fs, should;

should = require('should');

fs = require('fs');

cc = require('../');

describe('Utils', function() {
  describe('Copy', function() {
    return it('should copy a file', function(done) {
      var cp;
      cp = new cc.Copy('package.json', 'lib');
      return cp.run(function() {
        return fs.exists('lib/package.json', function(exists) {
          exists.should.be.ok;
          return done();
        });
      });
    });
  });
  describe('Delete', function() {
    it('should delete a file', function(done) {
      var ccc, cp, rm;
      ccc = new cc.CommandController(1);
      cp = ccc.addCommand(new cc.Copy('package.json', 'lib'));
      rm = ccc.addCommand(new cc.Delete(cp.getDstFile()));
      return ccc.run(function() {
        return fs.exists('lib/package.json', function(exists) {
          exists.should.be.not.ok;
          return done();
        });
      });
    });
    it('should skip if srcFile does not exists', function(done) {
      var ccc, rm;
      ccc = new cc.CommandController(1);
      rm = ccc.addCommand(new cc.Delete('package.json2'));
      return ccc.run(function() {
        rm.done.should.be.not.ok;
        return done();
      });
    });
    it('should allow chaining comands', function(done) {
      var ccc, cp, rm;
      ccc = new cc.CommandController(1);
      cp = ccc.addCommand(new cc.Copy('package.json', 'lib'));
      rm = ccc.addCommand(new cc.Delete(cp));
      return ccc.run(function() {
        return fs.exists('lib/package.json', function(exists) {
          exists.should.be.not.ok;
          return done();
        });
      });
    });
    return it('should have an empty dstFile', function() {
      var rm;
      rm = new cc.Delete('package.json');
      return should.not.exist(rm.getDstFile());
    });
  });
  describe('Move', function() {
    return it('should provide a correct dstFile', function() {
      var mv;
      mv = new cc.Move('test.gs', '/tmp');
      return mv.getDstFile().should.eql('/tmp/test.gs');
    });
  });
  return describe('Zip', function() {
    it('should zip and unzip files', function(done) {
      var ccc, cp, rm, zip;
      ccc = new cc.CommandController(1);
      cp = ccc.addCommand(new cc.Copy('package.json', 'lib'));
      zip = ccc.addCommand(new cc.Zip(cp.getDstFile()));
      zip.getDstFile().should.eql("lib/package.json.gz");
      zip = ccc.addCommand(new cc.Zip(zip.getDstFile()));
      zip.getDstFile().should.eql("lib/package.json");
      rm = ccc.addCommand(new cc.Delete(zip.getDstFile()));
      return ccc.run(function() {
        rm.done.should.be.ok;
        return done();
      });
    });
    return it('should allow chaining comands', function(done) {
      var ccc, cp, file, mv, rm, zip, _i, _len, _ref;
      ccc = new cc.CommandController(4);
      _ref = ['package.json', 'index.js'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        cp = ccc.addCommand(new cc.Copy(file, '/tmp'));
        zip = ccc.addCommand(new cc.Zip(cp));
        mv = ccc.addCommand(new cc.Move(zip, "."));
        rm = ccc.addCommand(new cc.Delete(mv));
      }
      return ccc.run(function() {
        rm.done.should.be.ok;
        return done();
      });
    });
  });
});

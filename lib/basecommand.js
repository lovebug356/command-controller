// Generated by CoffeeScript 1.6.2
var BaseCommand, fs, path;

fs = require('fs');

path = require('path');

BaseCommand = (function() {
  function BaseCommand(name) {
    this.name = name;
    if (!this.dependencies) {
      this.dependencies = [];
    }
    this.done = false;
  }

  BaseCommand.prototype.resolveSrcFile = function() {
    if (this.srcFile instanceof BaseCommand) {
      if (!this.dependencies) {
        this.dependencies = [];
      }
      this.addDependency(this.srcFile);
      return this.srcFile = this.srcFile.getDstFile();
    }
  };

  BaseCommand.prototype.addDependency = function(dep) {
    return this.dependencies.push(dep);
  };

  BaseCommand.prototype.getDstFile = function(filename) {
    if (filename == null) {
      filename = this.srcFile;
    }
    if (filename === void 0) {
      return void 0;
    }
    return path.join(this.dstFolder, path.basename(filename));
  };

  BaseCommand.prototype.isReady = function(done) {
    var _this = this;

    if (this.srcFile) {
      return fs.exists(this.srcFile, function(exists) {
        if (!exists) {
          return done(false);
        }
        return _this.isReadyDependencies(done);
      });
    } else {
      return this.isReadyDependencies(done);
    }
  };

  BaseCommand.prototype.isReadyDependencies = function(done) {
    var dependency, _i, _len, _ref;

    _ref = this.dependencies;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      dependency = _ref[_i];
      if (!dependency.done || (dependency.done && dependency.err)) {
        return done(false);
      }
    }
    return done(true);
  };

  BaseCommand.prototype.preRun = function(done) {
    if (this.getDstFile()) {
      return this.preRunFile(this.getDstFile(), done);
    }
    return done(true);
  };

  BaseCommand.prototype.preRunFile = function(filename, done) {
    var _this = this;

    if (filename !== null) {
      return fs.exists(filename, function(exists) {
        if (exists) {
          _this.done = true;
          _this.alreadyDone = true;
        }
        return done(!exists);
      });
    } else {
      return done(true);
    }
  };

  BaseCommand.prototype.run = function(done) {
    this.done = true;
    return done();
  };

  return BaseCommand;

})();

module.exports = BaseCommand;

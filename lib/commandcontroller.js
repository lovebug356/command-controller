// Generated by CoffeeScript 1.4.0
var CommandController, colors, fs;

colors = require('colors');

fs = require('fs');

CommandController = (function() {

  function CommandController(threads) {
    this.threads = threads;
    this.cmds = [];
    this.pending = [];
    this.running = [];
    this.done = [];
  }

  CommandController.prototype.size = function() {
    return this.cmds.length;
  };

  CommandController.prototype.addCommand = function(cmd) {
    this.cmds.push(cmd);
    this.pending.push(cmd);
    cmd.id = this.size();
    cmd.cc = this;
    return this.log(cmd, "add");
  };

  CommandController.prototype.firstReady = function(done, idx) {
    var _this = this;
    if (idx == null) {
      idx = 0;
    }
    if (idx + 1 > this.cmds.length) {
      return done(void 0);
    }
    return this.cmds[idx].isReady(function(ready) {
      if (!_this.cmds[idx].done && ready && _this.pending.indexOf(_this.cmds[idx]) >= 0) {
        return done(_this.cmds[idx]);
      } else {
        return _this.firstReady(done, idx + 1);
      }
    });
  };

  CommandController.prototype.prefix = function(cmd) {
    var ret;
    ret = "[" + this.pending.length + "/" + this.running.length + "/" + this.done.length + "]";
    if (cmd) {
      ret += "(" + cmd.id + ")";
    }
    return ret;
  };

  CommandController.prototype.log = function(cmd, log) {
    return console.log(("" + (this.prefix(cmd)) + " " + log + " " + cmd.name).blue);
  };

  CommandController.prototype.good = function(cmd, log) {
    return console.log(("" + (this.prefix(cmd)) + " " + log + " " + cmd.name).green);
  };

  CommandController.prototype.warning = function(cmd, log) {
    return console.log(("" + (this.prefix(cmd)) + " " + log + " " + cmd.name).yellow);
  };

  CommandController.prototype.error = function(cmd, log) {
    console.log(("" + (this.prefix(cmd)) + " " + log + " " + cmd.name).red);
    return console.log(cmd.err_log.red);
  };

  CommandController.prototype.startCmd = function(cmd, done) {
    var idx,
      _this = this;
    idx = this.pending.indexOf(cmd);
    this.pending.splice(idx, 1);
    this.running.push(cmd);
    this.warning(cmd, "start");
    return cmd.preRun(function(reallyRun) {
      if (reallyRun) {
        return cmd.run(function() {
          idx = _this.running.indexOf(cmd);
          if (!cmd.err) {
            _this.good(cmd, "done");
          } else {
            _this.error(cmd, "error");
          }
          _this.running.splice(idx, 1);
          _this.done.push(cmd);
          if (cmd.logFile) {
            fs.writeFile(cmd.logFile, cmd.cmd + "\n\n" + cmd.log, function(err) {});
          }
          return _this.run(done);
        });
      } else {
        return done();
      }
    });
  };

  CommandController.prototype.run = function(done) {
    var _this = this;
    if (this.running.length >= this.threads) {
      return;
    }
    if (this.pending.length > 0) {
      return this.firstReady(function(fr) {
        var running;
        if (fr) {
          running = _this.running.length;
          _this.startCmd(fr, done);
          if (running !== _this.running.length) {
            return _this.run(done);
          }
        } else {
          if (_this.running.length === 0) {
            console.log(("" + (_this.prefix()) + " skipped " + _this.pending.length).grey);
            return done();
          }
        }
      });
    } else {
      if (this.running.length === 0) {
        console.log(("" + (this.prefix()) + " all done").green);
        return done();
      }
    }
  };

  return CommandController;

})();

module.exports = CommandController;

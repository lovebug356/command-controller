// Generated by CoffeeScript 1.4.0
var CommandController, Group, colors, fs;

colors = require('colors');

fs = require('fs');

Group = require('./group');

CommandController = (function() {

  function CommandController(threads) {
    this.threads = threads;
    this.cmds = [];
    this.pending = [];
    this.running = [];
    this.done = [];
  }

  CommandController.prototype.size = function() {
    return this.cmds.length;
  };

  CommandController.prototype.addCommand = function(cmd) {
    this.cmds.push(cmd);
    this.pending.push(cmd);
    cmd.id = this.size();
    cmd.cc = this;
    this.log(cmd, "add");
    return cmd;
  };

  CommandController.prototype.getTargets = function(cmd) {
    var targets, _i, _len, _ref;
    targets = [];
    _ref = this.cmds;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      cmd = _ref[_i];
      if (cmd.dependencies.indexOf(cmd) >= 0) {
        targets.push(cmd);
      }
    }
    return targets;
  };

  CommandController.prototype.checkNoTarget = function(cmd) {
    var allDone, depCommand, idx, target, targets, _i, _j, _len, _len1, _ref, _results;
    _ref = cmd.dependencies;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      depCommand = _ref[_i];
      if (depCommand.target) {
        continue;
      }
      if (depCommand.done) {
        continue;
      }
      allDone = true;
      targets = this.getTargets(depCommand);
      for (_j = 0, _len1 = targets.length; _j < _len1; _j++) {
        target = targets[_j];
        if (!target.done) {
          allDone = false;
          break;
        }
      }
      if (allDone) {
        depCommand.done = true;
        idx = this.pending.indexOf(depCommand);
        this.pending.splice(idx, 1);
        this.done.push(depCommand);
        this.info(depCommand, "skipped (no target)");
        _results.push(this.checkNoTarget(depCommand));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  CommandController.prototype.checkPreRun = function(done) {
    var all, cmd, start, _i, _len, _ref, _results,
      _this = this;
    all = [];
    start = this.cmds.length;
    _ref = this.cmds;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      cmd = _ref[_i];
      if (cmd.done) {
        continue;
      }
      _results.push((function(cmd) {
        return cmd.preRun(function(really) {
          var idx;
          if (cmd.done) {
            idx = _this.pending.indexOf(cmd);
            if (idx >= 0) {
              _this.pending.splice(idx, 1);
              _this.done.push(cmd);
              _this.info(cmd, "skipped (prerun)");
            }
            _this.checkNoTarget(cmd);
          }
          all.push(cmd);
          if (_this.cmds.length === start) {
            if (all.length === start) {
              return done();
            }
          }
        });
      })(cmd));
    }
    return _results;
  };

  CommandController.prototype.firstTarget = function(done, idx) {
    var cmd, found, peer, _i, _len, _ref;
    if (idx == null) {
      idx = 0;
    }
    while (true) {
      found = false;
      if (idx + 1 > this.cmds.length) {
        return done(void 0);
      }
      cmd = this.cmds[idx];
      if (cmd.target) {
        return done(cmd);
      }
      _ref = this.cmds;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        peer = _ref[_i];
        if (peer.dependencies.indexOf(cmd) >= 0) {
          found = true;
          break;
        }
      }
      if (found) {
        idx += 1;
      } else {
        return done(cmd);
      }
    }
  };

  CommandController.prototype.firstReadyTarget = function(done, idx) {
    var _this = this;
    if (idx == null) {
      idx = 0;
    }
    return this.firstTarget(idx, function(target) {
      if (!target) {
        return done(void 0);
      }
      return target.isReady(function(ready) {
        if (!ready) {
          return firstReadyTarget(done, _this.cmds.indexOf(target) + 1);
        } else {
          return done(target);
        }
      });
    });
  };

  CommandController.prototype.firstReady = function(done, idx) {
    var _this = this;
    if (idx == null) {
      idx = 0;
    }
    if (idx + 1 > this.cmds.length) {
      return done(void 0);
    }
    return this.cmds[idx].isReady(function(ready) {
      if (!_this.cmds[idx].done && ready && _this.pending.indexOf(_this.cmds[idx]) >= 0) {
        return done(_this.cmds[idx]);
      } else {
        return _this.firstReady(done, idx + 1);
      }
    });
  };

  CommandController.prototype.prefix = function(cmd) {
    var ret;
    ret = "[" + this.pending.length + "/" + this.running.length + "/" + this.done.length + "]";
    if (cmd) {
      ret += "(" + cmd.id + ")";
    }
    return ret;
  };

  CommandController.prototype.log = function(cmd, log) {
    return console.log(("" + (this.prefix(cmd)) + " " + log + " " + cmd.name).blue);
  };

  CommandController.prototype.info = function(cmd, log) {
    return console.log(("" + (this.prefix(cmd)) + " " + log + " " + cmd.name).cyan);
  };

  CommandController.prototype.good = function(cmd, log) {
    return console.log(("" + (this.prefix(cmd)) + " " + log + " " + cmd.name).green);
  };

  CommandController.prototype.warning = function(cmd, log) {
    return console.log(("" + (this.prefix(cmd)) + " " + log + " " + cmd.name).yellow);
  };

  CommandController.prototype.error = function(cmd, log) {
    console.log(("" + (this.prefix(cmd)) + " " + log + " " + cmd.name).red);
    return console.log(cmd.err_log.red);
  };

  CommandController.prototype.run2done = function(cmd) {
    var idx;
    idx = this.running.indexOf(cmd);
    this.running.splice(idx, 1);
    this.done.push(cmd);
    if (!cmd.err) {
      this.good(cmd, "done");
    } else {
      this.error(cmd, "error");
    }
    if (cmd.logFile) {
      return fs.writeFile(cmd.logFile, cmd.cmd + "\n\n" + cmd.log, function(err) {});
    }
  };

  CommandController.prototype.startCmd = function(cmd, done) {
    var idx,
      _this = this;
    idx = this.pending.indexOf(cmd);
    this.pending.splice(idx, 1);
    this.running.push(cmd);
    if (!(cmd instanceof Group)) {
      this.warning(cmd, "start");
    }
    return cmd.preRun(function(reallyRun) {
      if (reallyRun) {
        return cmd.run(function() {
          _this.run2done(cmd);
          return _this.run(done);
        });
      } else {
        idx = _this.running.indexOf(cmd);
        _this.running.splice(idx, 1);
        _this.done.push(cmd);
        _this.info(cmd, "skipped");
        return _this.run(done);
      }
    });
  };

  CommandController.prototype.checkRun = function(done) {
    var _this = this;
    return this.checkPreRun(function() {
      return _this.run(done);
    });
  };

  CommandController.prototype.run = function(done) {
    var _this = this;
    if (this.running.length >= this.threads) {
      return;
    }
    if (this.pending.length > 0) {
      return this.firstReady(function(fr) {
        var running;
        if (_this.running.length >= _this.threads) {
          return;
        }
        if (fr) {
          running = _this.running.length;
          _this.startCmd(fr, done);
          if (running !== _this.running.length) {
            return _this.run(done);
          }
        } else {
          if (_this.running.length === 0) {
            console.log(("" + (_this.prefix()) + " skipped " + _this.pending.length).grey);
            return done();
          }
        }
      });
    } else {
      if (this.running.length === 0) {
        console.log(("" + (this.prefix()) + " all done").green);
        return done();
      }
    }
  };

  return CommandController;

})();

module.exports = CommandController;
